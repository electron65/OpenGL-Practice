#include <GL/glut.h>
#include <GL/gl.h>
#include <GL/glu.h>
#include <iostream>

#define Width 4
#define Height 4
GLubyte Texture[Width][Height][3];

void FillTexture() {
	int s, t;
	for (s = 0; s < Width; s++) {
		for (t = 0; t < Height; t++) {
			GLubyte Intensity = ((s + t) % 2) * 255;
			Texture[s][t][0] = Intensity;//red
			Texture[s][t][1] = Intensity;// green
			Texture[s][t][2] = Intensity;// blue
		}
	}
}

void Init() {
	glClearColor(0.0, 0.0, 0.0, 0.0);
	FillTexture();
	glTexImage2D(GL_TEXTURE_2D, 0, 3, Width, Height, 0, GL_RGB, GL_UNSIGNED_BYTE, &Texture[0][0][0]);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP);
	
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);

	glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
	glEnable(GL_TEXTURE_2D);
}

void display() {
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glBegin(GL_QUADS);
		glTexCoord2f(0.0, 0.0); glVertex3f(-1.0, -1.0, 0.0);
		glTexCoord2f(0.0, 3.0); glVertex3f(-1.0, 1.0, 0.0);
		glTexCoord2f(3.0, 3.0); glVertex3f(1.0, 1.0, 0.0);
		glTexCoord2f(3.0, 0.0); glVertex3f(1.0, -1.0, 0.0);
		glEnd();
	glutSwapBuffers();
}

int main(int argc, char *argv[]) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
	glutInitWindowSize(500, 500);
	glutInitWindowPosition(100, 100);
	glutCreateWindow("Test Window");
	Init();
	glutDisplayFunc(display);
	glutMainLoop();
	return 0;
}
